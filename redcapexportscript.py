# -*- coding: utf-8 -*-
"""RedCapExportScript.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qv_uSYuJtHZO-SgfjyLNft3RHXiN3yGs
"""

#!pip install requests
#!pip install pandas
#!pip install dropbox
#!pip install xlsxwriter
from io import BytesIO
from google.colab import userdata
import requests
import pandas as pd
import dropbox
from xlsxwriter import Workbook
from datetime import datetime

import requests
import pandas as pd
from io import BytesIO
import dropbox
from datetime import datetime

def export_redcap_data():
    redcap_url = "https://redcap.sph.cuny.edu/api/"
    token = userdata.get('RCAP_TOKEN')

    import_data = {
        'token': token,
        'content': 'record',
        'format': 'json',
        'type': 'flat',
        'rawOrLabel': 'raw',
        'returnFormat': 'json'
    }

    response = requests.post(redcap_url, data=import_data)

    if response.status_code == 200:
        imported_redcap_data = pd.DataFrame(response.json())
        return imported_redcap_data
    else:
        print("Error:", response.status_code)
        print(response.text)
        return None

new_data = export_redcap_data()

if new_data is not None:
    dropbox_token = userdata.get('DROPBOX_KEY')
    dbx = dropbox.Dropbox(dropbox_token)

    folder_path = "/Harlem Strong Participant List/1. Screening Logs/P3PhysicalLogs"
    file_name = f"P3PhysicalLog_Latest.xlsx"
    file_path = f"{folder_path}/{file_name}"

    try:
        _, res = dbx.files_download(file_path)
        existing_file = BytesIO(res.content)
        existing_data = pd.read_excel(existing_file)
        print("Existing file downloaded successfully.")
    except dropbox.exceptions.ApiError as e:
        if e.error.is_path() and e.error.get_path().is_not_found():
            print("No existing file found. Creating new file.")
            existing_data = pd.DataFrame(columns=new_data.columns)
        else:
            print("An error occurred while accessing the existing file:", e)
            existing_data = None

    if existing_data is not None:
        merged_data = pd.concat([existing_data, new_data]).drop_duplicates(subset=['consumer_name'], keep='first')

        excel_buffer = BytesIO()
        merged_data.to_excel(excel_buffer, index=False, engine='xlsxwriter')
        excel_buffer.seek(0)

        try:
            dbx.files_upload(excel_buffer.read(), file_path, mode=dropbox.files.WriteMode('overwrite'))
            print("File updated with new records and uploaded successfully to Dropbox.")
        except dropbox.exceptions.ApiError as e:
            print("An error occurred during upload:", e.error)
    else:
        print("Error occurred; could not access or create new data.")
else:
    print("No data exported from REDCap.")

#Environment variables for running this serverlessly
import os

env_vars = {
    "RCAP_TOKEN": "your_redcap_token_here",
    "DROPBOX_KEY": "your_dropbox_key_here"
}

with open(".env", "w") as f:
    for key, value in env_vars.items():
        f.write(f"{key}={value}\n")
from google.colab import files
files.download('.env')